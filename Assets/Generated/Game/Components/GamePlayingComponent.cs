//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity playingEntity { get { return GetGroup(GameMatcher.Playing).GetSingleEntity(); } }
    public PlayingComponent playing { get { return playingEntity.playing; } }
    public bool hasPlaying { get { return playingEntity != null; } }

    public GameEntity SetPlaying(bool newValue) {
        if (hasPlaying) {
            throw new Entitas.EntitasException("Could not set Playing!\n" + this + " already has an entity with PlayingComponent!",
                "You should check if the context already has a playingEntity before setting it or use context.ReplacePlaying().");
        }
        var entity = CreateEntity();
        entity.AddPlaying(newValue);
        return entity;
    }

    public void ReplacePlaying(bool newValue) {
        var entity = playingEntity;
        if (entity == null) {
            entity = SetPlaying(newValue);
        } else {
            entity.ReplacePlaying(newValue);
        }
    }

    public void RemovePlaying() {
        playingEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayingComponent playing { get { return (PlayingComponent)GetComponent(GameComponentsLookup.Playing); } }
    public bool hasPlaying { get { return HasComponent(GameComponentsLookup.Playing); } }

    public void AddPlaying(bool newValue) {
        var index = GameComponentsLookup.Playing;
        var component = (PlayingComponent)CreateComponent(index, typeof(PlayingComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlaying(bool newValue) {
        var index = GameComponentsLookup.Playing;
        var component = (PlayingComponent)CreateComponent(index, typeof(PlayingComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlaying() {
        RemoveComponent(GameComponentsLookup.Playing);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlaying;

    public static Entitas.IMatcher<GameEntity> Playing {
        get {
            if (_matcherPlaying == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Playing);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlaying = matcher;
            }

            return _matcherPlaying;
        }
    }
}
